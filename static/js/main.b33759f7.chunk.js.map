{"version":3,"sources":["components/Header.jsx","components/Todo.jsx","components/EmptyTodo.jsx","components/Todos.jsx","components/AddTodo.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","useColorMode","colorMode","toggleColorMode","display","p","icon","isRound","mr","onClick","Todo","todo","deleteTodo","w","ml","text","id","EmptyTodo","bg","color","borderRadius","Todos","todos","divider","borderWidth","length","alignItems","mt","map","AddTodo","setTodos","useState","setTodo","toast","useToast","variant","placeholder","onChange","e","target","value","handleChange","colorScheme","px","newTodo","nanoid","title","status","duration","isClosable","addTodo","App","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","maxW","base","sm","lg","xl","updatedTodo","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","initialColorMode","document","getElementById"],"mappings":"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","file":"static/js/main.b33759f7.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { Box, Heading, IconButton, useColorMode } from '@chakra-ui/react';\r\nimport { FaSun, FaMoon } from 'react-icons/fa'\r\n\r\nconst Header = () => {\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n    return (\r\n       <Box display='flex' p={6}>\r\n           <IconButton \r\n           icon={colorMode === 'light' ? <FaSun /> : <FaMoon />} \r\n           isRound={true}\r\n           mr={5}\r\n           onClick={toggleColorMode}\r\n           />\r\n          <Heading \r\n                /* bgGradient=\"linear(to-l, #7928CA, #FF0080)\" */\r\n                /* bgClip='text' */\r\n            >Todo App</Heading>\r\n       </Box>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import { Text, IconButton, HStack, StackDivider } from \"@chakra-ui/react\";\r\nimport { FaTrash } from 'react-icons/fa';\r\n\r\n\r\nconst Todo = ({ todo, deleteTodo }) => {\r\n    return (\r\n        <HStack p={2}>\r\n            <Text w='100%' ml={4}>{todo.text}</Text>\r\n            <IconButton icon={ <FaTrash/> } \r\n                isRound={true}\r\n                onClick={() => deleteTodo(todo.id)}\r\n            />\r\n        </HStack>\r\n    )\r\n}\r\n\r\nexport default Todo;","import { Text } from '@chakra-ui/react';\r\n\r\nconst EmptyTodo = () => {\r\n    return (\r\n        <Text\r\n            p={5}\r\n            bg='red.400'\r\n            color='white'\r\n            borderRadius={10}\r\n        >No Todo Items</Text>\r\n    )\r\n}\r\n\r\nexport default EmptyTodo;","import { VStack, StackDivider, Text } from \"@chakra-ui/react\"\r\n\r\n//components\r\nimport Todo from './Todo';\r\nimport EmptyTodo from './EmptyTodo';\r\n\r\nconst Todos = ({ todos, deleteTodo }) => {\r\n    \r\n    return (\r\n        <VStack\r\n            divider={<StackDivider />}\r\n            borderWidth={todos.length > 0 ? '1px' : 'none' }\r\n            alignItems='stretch'  \r\n            mt={8}  \r\n        >\r\n            {\r\n                todos.length > 0 ? todos.map(todo => (\r\n                    <Todo todo={todo} key={todo.id} deleteTodo={deleteTodo} />\r\n                )) : <EmptyTodo />\r\n            }\r\n        </VStack>\r\n    )\r\n}\r\n\r\nexport default Todos;","import { useState } from 'react';\r\nimport { Button, HStack, Input, useToast } from \"@chakra-ui/react\"\r\nimport { nanoid } from 'nanoid';\r\n\r\n\r\nconst AddTodo = ({ todos, setTodos }) => {\r\n\r\n    const [todo, setTodo] = useState('');\r\n    const toast = useToast();\r\n\r\n    const handleChange = (e) => {\r\n        setTodo(e.target.value);\r\n    }\r\n\r\n    const addTodo = () => {\r\n        if(!todo) {\r\n            toast({\r\n                title: 'No Todo item to Add',\r\n                status: 'error',\r\n                duration: '3000',\r\n                isClosable: true\r\n            })\r\n            return;\r\n        };\r\n\r\n        const newTodo = {\r\n            id: nanoid(),\r\n            text: todo\r\n        }\r\n\r\n        setTodos([...todos, newTodo])\r\n        setTodo('')\r\n    }\r\n\r\n    return (\r\n        <HStack>\r\n            <Input \r\n                variant=\"filled\"\r\n                placeholder=\"Add todo item...\"\r\n                onChange={(e) => handleChange(e)}\r\n                value={todo}\r\n            />\r\n            <Button\r\n                colorScheme=\"blue\"\r\n                px={8}\r\n                onClick={() => addTodo()}\r\n            >Add Todo</Button>\r\n        </HStack>\r\n    )\r\n}\r\n\r\nexport default AddTodo;","import { useState, useEffect } from 'react';\nimport { VStack, Box } from '@chakra-ui/react';\n\n//components\nimport Header from \"./components/Header\";\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\n\nconst initialTodo = [\n  {\n      id: 1,\n      text: 'Hello'\n  }\n];\n\nfunction App() {\n\n  const [todos, setTodos] = useState(() => JSON.parse(localStorage.getItem('todos')) || []) //initialTodo\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }, [todos])\n\n  const deleteTodo = (id) => {\n    const updatedTodo = todos.filter(todo => todo.id !== id);\n    setTodos(updatedTodo);\n  }\n\n  return (\n    <VStack>\n      <Header />\n      <Box\n        w='100%'\n        maxW={{ base: '80vw', sm: '80vw', lg: '50vw', xl: '40vw'}}\n      >\n        <AddTodo todos={todos} setTodos={setTodos} />\n        <Todos todos={todos} deleteTodo={deleteTodo} />      \n      </Box>\n    </VStack>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { ChakraProvider, ColorModeScript } from '@chakra-ui/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <ColorModeScript initialColorMode='light' />\n    <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}